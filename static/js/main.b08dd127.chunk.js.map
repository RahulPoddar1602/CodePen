{"version":3,"sources":["components/Editor.js","hooks/useLocalStorage.js","components/App.js","index.js"],"names":["Editor","props","language","displayName","value","onChange","useState","open","setOpen","className","onClick","prevOpen","onBeforeChange","editor","data","options","lineWrapping","lint","mode","faLanguage","lineNumbers","theme","useLocalStorage","key","initialValue","prefixedKey","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","html","setHtml","css","setCss","JS","setJS","srcDoc","setSrcDoc","timeout","setTimeout","clearTimeout","title","sandbox","frameBorder","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPA4CeA,MApCf,SAAgBC,GAMVA,EAJEC,SAFgB,IAGhBC,EAGFF,EAHEE,YACAC,EAEFH,EAFEG,MACAC,EACFJ,EADEI,SALe,EAOEC,oBAAS,GAPX,mBAOZC,EAPY,KAOPC,EAPO,KAYnB,OACA,yBAAKC,UAAS,2BAAsBF,EAAK,GAAG,cACxC,yBAAKE,UAAU,gBACVN,EACD,4BACAO,QAAS,kBAAIF,GAAQ,SAAAG,GAAQ,OAAKA,QACzB,IAAPJ,EAAY,QAAQ,SAE1B,kBAAC,aAAD,CACIK,eAbR,SAAsBC,EAAQC,EAAMV,GAEhCC,EAASD,IAYLA,MAAOA,EACPK,UAAU,sBACVM,QAAS,CACLC,cAAa,EACbC,MAAK,EACLC,KAAKC,IACLC,aAAY,EACXC,MAAM,gBCnBRC,MAhBf,SAAyBC,EAAIC,GACzB,IAAMC,EAFK,iBAEkBF,EADU,EAEhBjB,oBAAS,WAC5B,IAAMoB,EAAYC,aAAaC,QAAQH,GACvC,OAAc,MAAXC,EAAwBG,KAAKC,MAAMJ,GACZ,oBAAfF,EACJA,IAEAA,KAR4B,mBAEhCpB,EAFgC,KAE1B2B,EAF0B,KAazC,OAHEC,qBAAU,WACPL,aAAaM,QAAQR,EAAYI,KAAKK,UAAU9B,MACjD,CAACqB,EAAYrB,IACV,CAACA,EAAM2B,ICyCDI,MArDf,WAAgB,IAAD,EACUb,EAAgB,OAAO,IADjC,mBACJc,EADI,KACCC,EADD,OAEQf,EAAgB,MAAM,IAF9B,mBAEJgB,EAFI,KAEAC,EAFA,OAGMjB,EAAgB,KAAK,IAH3B,mBAGJkB,EAHI,KAGDC,EAHC,OAIcnC,mBAAS,IAJvB,mBAIJoC,EAJI,KAIGC,EAJH,KAiBb,OAZEX,qBAAU,WACN,IAAMY,EAAUC,YAAW,WACvBF,EAAU,2CAAD,OAEDP,EAFC,uCAGAE,EAHA,yCAICE,EAJD,kDAOX,KACF,OAAO,kBAAIM,aAAaF,MAC1B,CAACR,EAAKE,EAAIE,IAEZ,yBAAK/B,UAAU,OACX,yBAAKA,UAAU,iBACf,kBAAC,EAAD,CACIP,SAAS,MACTC,YAAY,OACZC,MAAOgC,EACP/B,SAAUgC,IAEd,kBAAC,EAAD,CACInC,SAAS,MACTC,YAAY,MACZC,MAAOkC,EACPjC,SAAUkC,IAEd,kBAAC,EAAD,CACIrC,SAAS,aACTC,YAAY,KACZC,MAAOoC,EACPnC,SAAUoC,KAGd,yBAAKhC,UAAU,QACX,4BACAiC,OAAQA,EACRK,MAAM,SACNC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNC,OAAO,YC5CnBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.b08dd127.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport 'codemirror/lib/codemirror.css'\r\nimport 'codemirror/theme/material.css'\r\nimport 'codemirror/mode/xml/xml'\r\nimport 'codemirror/mode/javascript/javascript'\r\nimport 'codemirror/mode/css/css'\r\nimport { Controlled as ControlledEditor } from 'react-codemirror2'\r\nimport { faLanguage } from '@fortawesome/free-solid-svg-icons'\r\nfunction Editor(props) {\r\n    const{\r\n        language,\r\n        displayName,\r\n        value,\r\n        onChange\r\n    }=props;\r\n    const [open,setOpen]=useState(true) \r\n    function handleChange(editor, data ,value)\r\n    {\r\n        onChange(value)   \r\n    }\r\n    return (\r\n    <div className={`editor-container ${open?'':'collapsed'}`}>\r\n        <div className=\"editor-title\">\r\n            {displayName}\r\n            <button\r\n            onClick={()=>setOpen(prevOpen => !prevOpen)}\r\n            >{open===true?'Close':'Open'}</button>\r\n        </div>\r\n        <ControlledEditor\r\n            onBeforeChange={handleChange}\r\n            value={value}\r\n            className=\"code-mirror-wrapper\"\r\n            options={{\r\n                lineWrapping:true,\r\n                lint:true,\r\n                mode:faLanguage,\r\n                lineNumbers:true\r\n                ,theme:'material'\r\n            }}\r\n        />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Editor","import {useEffect,useState} from 'react'\r\nconst Prefix = 'codepen-clone-'\r\nfunction useLocalStorage(key,initialValue) {\r\n    const prefixedKey = Prefix + key\r\n    const [value,setValue]=useState(()=>{\r\n        const jsonValue = localStorage.getItem(prefixedKey)\r\n        if(jsonValue!=null) return JSON.parse(jsonValue)\r\n        if( typeof initialValue==='function')\r\n        return initialValue()\r\n        else\r\n        return initialValue\r\n    })\r\n    useEffect(()=>{\r\n       localStorage.setItem(prefixedKey,JSON.stringify(value))\r\n    },[prefixedKey,value])\r\n  return [value,setValue]\r\n}\r\n\r\nexport default useLocalStorage","import React,{useState,useEffect} from 'react'\r\nimport Editor from './Editor'\r\nimport useLocalStorage from '../hooks/useLocalStorage'\r\nfunction App() {\r\n    const [html,setHtml]=useLocalStorage('html','')\r\n    const [css,setCss]=useLocalStorage('css','')\r\n    const [JS,setJS]=useLocalStorage('js','')\r\n    const [srcDoc,setSrcDoc]=useState('')\r\n    useEffect(()=>{\r\n        const timeout = setTimeout(()=>{\r\n            setSrcDoc(`\r\n            <html>\r\n            <body>${html}</body>\r\n            <style>${css}</style>\r\n            <script>${JS}</style>\r\n            </html>\r\n            `)\r\n        },250)\r\n        return ()=>clearTimeout(timeout)\r\n    },[html,css,JS])\r\n  return (\r\n    <div className='box'>\r\n        <div className=\"pane top-pane\">\r\n        <Editor\r\n            language=\"xml\"\r\n            displayName=\"HTML\"\r\n            value={html}\r\n            onChange={setHtml}\r\n        />\r\n        <Editor\r\n            language=\"css\"\r\n            displayName=\"CSS\"\r\n            value={css}\r\n            onChange={setCss}\r\n        />\r\n        <Editor\r\n            language=\"javascript\"\r\n            displayName=\"JS\"\r\n            value={JS}\r\n            onChange={setJS}\r\n        />\r\n        </div>\r\n        <div className=\"pane\">\r\n            <iframe\r\n            srcDoc={srcDoc}\r\n            title=\"output\"\r\n            sandbox=\"allow-scripts\"\r\n            frameBorder=\"0\"\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            />\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}